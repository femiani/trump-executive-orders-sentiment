import praw
import pandas as pd
from datetime import datetime

# Set up Reddit API credentials using PRAW
reddit = praw.Reddit(
    user_agent="MyPrawApp", 
    client_id="bYbwhw5MbGOjGAJssWwjwQ", 
    client_secret="jXSFTAT2VVz4v6I6ZrYM2UIKrfOi-g", 
    username="samanalyze", 
    password="@itsjustsamueL1"
)

# List of subreddits to scrape from
subreddits = ["politics", "conservative", "news"]

def search_posts(keyword, subreddits, after_date):
    """
    Searches for posts containing the given keyword in the specified subreddits,
    filtering posts created after the given date.
    
    Parameters:
        keyword (str): The keyword to search for.
        subreddits (list): List of subreddit names.
        after_date (str): The starting date in "YYYY-MM-DD" format.
    
    Returns:
        list: A list of dictionaries with post and comment data.
    """
    posts = []
    # Convert after_date to Unix timestamp
    after_timestamp = int(datetime.strptime(after_date, "%Y-%m-%d").timestamp())
    
    for sub in subreddits:
        subreddit_obj = reddit.subreddit(sub)
        # PRAW's search method does not have a direct date filter, so we iterate and filter manually.
        for submission in subreddit_obj.search(keyword, sort='new', limit=500):
            if submission.created_utc >= after_timestamp:
                # Convert post timestamp to readable format
                post_datetime = datetime.fromtimestamp(submission.created_utc).strftime("%Y-%m-%d %H:%M:%S")
                # Load all comments for this submission (flatten the tree)
                submission.comments.replace_more(limit=0)
                for comment in submission.comments.list():
                    # Convert comment timestamp to readable format
                    comment_datetime = datetime.fromtimestamp(comment.created_utc).strftime("%Y-%m-%d %H:%M:%S")
                    posts.append({
                        'post_id': submission.id,
                        'post_title': submission.title,
                        'post_upvote_ratio': submission.upvote_ratio,
                        'post_timestamp': submission.created_utc,
                        'num_comments': submission.num_comments,
                        'post_datetime': post_datetime,
                        'comment_id': comment.id,
                        'comment_body': comment.body,
                        'comment_timestamp': comment.created_utc,
                        'comment_datetime': comment_datetime,
                        'subreddit': submission.subreddit.display_name
                    })
    return posts

# -----------------------------
# Scrape posts about Trump's election win after 2025-01-20
# -----------------------------
election_posts = search_posts("Trump", subreddits, "2025-01-20")
print(f"Scraped {len(election_posts)} posts about Trump's election win.")

# -----------------------------
# Scrape posts about executive orders after 2025-01-20
# -----------------------------
executive_posts = search_posts("executive order", subreddits, "2025-01-20")
print(f"Scraped {len(executive_posts)} posts about executive orders.")

# -----------------------------
# Save the scraped data to CSV files
# -----------------------------
if election_posts:
    election_df = pd.DataFrame(election_posts)
    election_df.to_csv("election_posts.csv", index=False)
    print("Saved election posts to election_posts.csv")
else:
    print("No election posts scraped.")

if executive_posts:
    executive_df = pd.DataFrame(executive_posts)
    executive_df.to_csv("executive_posts.csv", index=False)
    print("Saved executive posts to executive_posts.csv")
else:
    print("No executive posts scraped.")
